MODE LINES = FLEX[1:0] STRING;

OP +:= = (REF LINES u, STRING v) REF LINES: (
    sweep heap;
    [UPB u + 1] STRING w;
    w[: UPB u] := u;
    w[UPB w] := v;
    u := w
);

BOOL finished reading := FALSE;
on logical file end (stand in, (REF FILE f) BOOL: finished reading := TRUE);

LINES lines;
WHILE 
    STRING line;
    get(stand in, (line, new line));
    NOT finished reading
DO
    lines := lines +:= line
OD;

INT number of rows := UPB lines, number of columns := UPB lines[1];

[number of rows, number of columns]INT heights;
[number of rows, number of columns]INT steps;
[number of rows, number of columns]BOOL changed;
[2]INT start point;
[2]INT end   point;

FOR i TO number of rows
DO
    FOR j TO number of columns
    DO
        CHAR c := lines[i][j];
        INT h :=
            IF c = "S"
            THEN
                start point := (i, j);
                0
            ELIF c = "E"
            THEN
                end point := (i, j);
                25
            ELSE
                (ABS c) - 97
            FI;
        heights[i, j] := h;

        IF c = "E"
        THEN
            steps[i, j] := 0;
            changed[i, j] := TRUE
        ELSE
            steps[i, j] := -1;
            changed[i, j] := FALSE
        FI
    OD
OD;

BOOL continue := TRUE;

WHILE continue
DO
    continue := FALSE;
    FOR i TO number of rows
    DO
        FOR j TO number of columns
        DO
            IF changed[i, j]
            THEN
                changed[i, j] := FALSE;
                FOR i offset FROM -1 BY 2 TO 1
                DO
                    IF INT i prime := i + i offset;
                        i prime >= 1 AND i prime <= number of rows
                    THEN
                        IF INT height difference := heights[i, j] - heights[i prime, j];
                            height difference <= 1 AND (steps[i prime, j] > steps[i, j] + 1 OR steps[i prime, j] = -1)
                        THEN
                            steps[i prime, j] := steps[i, j] + 1;
                            continue := changed[i prime, j] := TRUE
                        FI
                    FI
                OD;

                FOR j offset FROM -1 BY 2 TO 1
                DO
                    IF INT j prime := j + j offset;
                        j prime >= 1 AND j prime <= number of columns
                    THEN
                        IF INT height difference := heights[i, j] - heights[i, j prime];
                            height difference <= 1 AND (steps[i, j prime] > steps[i, j] + 1 OR steps[i, j prime] = -1)
                        THEN
                            steps[i, j prime] := steps[i, j] + 1;
                            continue := changed[i, j prime] := TRUE
                        FI
                    FI
                OD
            FI
        OD
    OD
OD;

print((steps[start point[1], start point[2]], new line));

INT shortest := steps[start point[1], start point[2]];
 
PRIO MIN = 9;
OP MIN = (INT a,b) INT: ( a<b | a | b );

FOR i TO number of rows
DO
    FOR j TO number of columns
    DO
        IF heights[i, j] = 0 AND steps[i, j] /= -1
        THEN
            shortest := shortest MIN steps[i, j]
        FI
    OD
OD;

print(shortest)
