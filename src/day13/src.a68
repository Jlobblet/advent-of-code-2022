MODE VALUE = UNION (NESTED, INT), NESTED = STRUCT (REF FLEX []VALUE nested);
MODE VALUES = REF FLEX[] VALUE;

PROC print value = (REF VALUE v) VOID: (
    CASE v IN
        (INT i): print((i, ", ")),
        (NESTED n): (
            print("[");
            REF []VALUE v := nested OF n;
            FOR i FROM LWB v TO UPB v
            DO
                print value (v[i])
            OD;
            print("], ")
        )
    ESAC
);

PROC empty values = VALUES: (
    REF []VALUE return = HEAP [0]VALUE; return
);

PROC singleton = (INT i) REF []VALUE: (
    REF []VALUE v = HEAP [1]VALUE := (i);
    v
);

PROC nest = (REF []VALUE v) VALUE: (
    NESTED n;
    nested OF n := v;
    n
);

OP +:= = (VALUES values, VALUE v) VALUES: (
    [UPB values + 1] VALUE new;
    new[: UPB values] := values;
    new[UPB new] := v;
    values := new;
    values
);

PRIO MIN = 9;
OP MIN = (INT a, b) INT: ( a < b | a | b );

# Priority of other comparison operators #
PRIO CMP = 5;
OP CMP = (INT a, b) INT: ( a > b | -1 |: a < b | 1 | 0 );
OP CMP = (REF []VALUE a, b) INT: (
    INT length of a = UPB a - LWB a + 1,
        length of b = UPB b - LWB b + 1;
    INT ret := 0;
    FOR i TO length of a MIN length of b
    WHILE ret = 0
    DO
        ret := a[i] CMP b[i]
    OD;
    ( ret /= 0 | ret | length of a CMP length of b )
);

OP CMP = (REF VALUE a, b) INT: (
    CASE a IN
        (INT i): CASE b IN
            (INT j): i CMP j,
            (NESTED v): singleton(i) CMP nested OF v
        ESAC,
        (NESTED u): CASE b IN
            (INT j): nested OF u CMP singleton(j),
            (NESTED v): nested OF u CMP nested OF v
        ESAC
    ESAC
);

OP <= = (REF VALUE a, b) BOOL: a CMP b >= 0;
OP < = (REF VALUE a, b) BOOL: a CMP b = 1;
OP > = (REF VALUE a, b) BOOL: a CMP b = -1;

MODE STACKNEXT = STRUCT (VALUES values, REF STACKNEXT next);

PROC new stacknext = REF STACKNEXT: HEAP STACKNEXT;

PROC free stacknext = (REF STACKNEXT s) VOID: next OF s := NIL;

MODE STACK = REF STACKNEXT;

PROC stack init = (REF STACK self) REF STACK: self := NIL;

PROC push = (REF STACK self, VALUES value) REF STACK: self := new stacknext := (value, self);

OP +:= = (REF STACK self, VALUES value) REF STACK: push(self, value);

PROC pop = (REF STACK self) VALUES: (
    STACKNEXT old head := self;
    STACK new head := next OF self;
    VALUES return := values OF self;
    free stacknext (old head);
    self := new head;
    return
);

PROC parse line = (STRING line) VALUE: (
    STACK stack;
    VOID(stack init(stack));
    stack +:= empty values;
    BOOL start new := FALSE;
    FOR i TO UPB line
    DO
        CHAR c = line[i];
        IF c = "[" THEN
            stack +:= empty values;
            start new := TRUE
        ELIF c = "]" THEN
            REF []VALUE vs := pop(stack);
            VALUE v := nest(vs);
            (values OF stack) +:= v;
            start new := TRUE
        ELIF c = "," THEN
            start new := TRUE
        ELIF is digit (c) THEN
            REF []VALUE vs := values OF stack;
            IF start new THEN values OF stack +:= 0 FI;
            CASE vs[UPB vs]
            IN
                (INT i): vs[UPB vs] := 10 * i + (ABS c - ABS "0")
            OUT
                EMPTY
            ESAC;
            start new := FALSE
        ELSE
            SKIP
        FI
    OD;

    nest(values OF stack)
);


INT sum := 0;
INT current := 0;
VALUES all values := empty values;

WHILE 
    STRING line;
    BOOL finished reading := FALSE;
    on logical file end (stand in, (REF FILE f) BOOL: finished reading := TRUE);

    current +:= 1;
    get(stand in, (line, new line));
    VALUE left := parse line (line);
    all values +:= left;
    get(stand in, (line, new line));
    VALUE right := parse line (line);
    all values +:= right;
    get(stand in, new line);

    NOT finished reading
DO
    sum +:= (left <= right | current | 0)
OD;

print((sum, new line));

# Part 2 #
PROC swap = (VALUES vs, INT a, b) VOID: (
    VALUE tmp = vs[a];
    vs[a] := vs[b];
    vs[b] := tmp
);

PROC quicksort step = (VALUES vs, INT lower, upper) VOID: (
    INT smaller := lower + 1,
        larger  := upper;

    VALUE pivot := vs[lower];

    WHILE smaller <= larger
    DO
        WHILE
            VALUE s := vs[smaller];
            s < pivot AND smaller < upper
        DO smaller +:= 1 OD;
        WHILE
            VALUE l := vs[larger];
            l > pivot AND larger > lower
        DO larger -:= 1 OD;
        IF smaller < larger THEN
            swap(vs, smaller, larger);
            smaller +:= 1;
            larger  -:= 1
        ELSE
            smaller +:= 1
        FI
    OD;

    swap(vs, lower, larger);

    IF lower < larger - 1 THEN quicksort step (vs, lower, larger - 1) FI;
    IF upper > larger + 1 THEN quicksort step (vs, larger + 1, upper) FI
);

PROC quicksort = (VALUES vs) VOID: (UPB vs > 1 | quicksort step (vs, 1, UPB vs));

# Add dividers #
STRING divider two string = "[[2]]",
    divider six string = "[[6]]";
VALUE divider two := parse line (divider two string),
    divider six := parse line (divider six string);
all values +:= divider two;
all values +:= divider six;

# Sort #
quicksort(all values);

OP = = (REF []VALUE a, b) BOOL: (
    INT length of a = UPB a - LWB a + 1,
        length of b = UPB b - LWB b + 1;
    IF length of a = length of b THEN
        BOOL return := TRUE;
        FOR i TO length of a
        WHILE return
        DO
            return := a[i] = b[i]
        OD;
        return
    ELSE
        FALSE
    FI
);

OP = = (REF VALUE a, b) BOOL: (
    CASE a IN
        (INT i): CASE b IN
            (INT j): i = j,
            (NESTED v): FALSE
        ESAC,
        (NESTED u): CASE b IN
            (INT j): FALSE,
            (NESTED v): nested OF u = nested OF v
        ESAC
    ESAC
);

# Find indices #
INT divider two index := 0, divider six index := 0;

FOR i TO UPB all values
DO
    VALUE v := all values [i];
    (  v = divider two | divider two index := i
    |: v = divider six | divider six index := i )
OD;

# Subtract 2 because I'm adding two empty lists at the start somewhere #
print(((divider two index - 2) * (divider six index - 2), new line))
